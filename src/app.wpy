<style lang="scss" src='./styles/app.scss'></style>
<script>
import wepy from 'wepy'
import locales from '@/utils/locales'
import { setStore } from 'wepy-redux'
import configStore from './store'
import T from '@/utils/weapp-i18n'
import 'wepy-async-function'
import UserModel from '@/models/usermodel'
import handleDarkMode from '@/utils/handle-dark-mode'

const store = configStore()
setStore(store)

export default class extends wepy.app {
  config = {
    pages: [
      'pages/landing',
      'pages/registration',
      'pages/login',
      'pages/become-rescuer',
      'pages/adopter-home',
      'pages/rescuer-home',
      'pages/user-profile',
      'pages/animal-profile',
      'pages/edit-profile',
      'pages/edit-animal',
      'pages/animals',
      'pages/application-detail',
      'pages/about-bork'
    ],
    window: {
      backgroundTextStyle: 'dark',
      navigationBarBackgroundColor: '#FFFFFF',
      navigationBarTextStyle: 'black',
      navigationBarTitleText: 'bork',
      enablePullDownRefresh: true
    }
  }

  globalData = {
    user: {},
    lang: 'zh_CN'
  }

  constructor () {
    super()
    this.use('requestfix')
    this.use('promisify')
  }

  registerLocales () {
    console.log('heeeere in registering locales')
    T.registerLocale(locales)
    const lang = wx.getStorageSync('lang')
    if (lang) {
      this.globalData.lang = lang
    } else {
      wx.setStorageSync('lang', 'zh_CN')
    }
    T.setLocale(this.globalData.lang)
    wepy.T = T
  }

  async getSystemLang () {
    try {
      const {language} = await wepy.getSystemInfo()
      if (language !== 'zh_CN') {
        return 'en'
      } else {
        return 'zh_CN'
      }
    } catch (err) {
      console.error(err)
    }
  }

  onLaunch () {
    wx.onAppRoute(handleDarkMode)
    this.globalData.user = new UserModel()
    this.registerLocales()
    setTimeout(() => {
      this.checkForUpdates()
    }, 1000)
  }

  async checkForUpdates () {
    const updateManager = wx.getUpdateManager()
    updateManager.onCheckForUpdate(({hasUpdate}) => {
      if (hasUpdate) {
        updateManager.onUpdateReady(function () {
          wx.showModal({
            title: '更新提示',
            content: '新版本已经准备好，是否重启应用？',
            success: function (res) {
              if (res.confirm) {
                updateManager.applyUpdate()
              }
            }
          })
        })

        updateManager.onUpdateFailed(function () {
          wx.showModal({
            title: '更新版本失败'
          })
        })
      }
    })
  }
}
</script>
