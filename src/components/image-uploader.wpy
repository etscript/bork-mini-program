<style lang="scss">
  @import "../styles/variables.scss";
  .form--image-container {
    display:flex;
    background-color: $white;
  }

  .form--image-inner{
    display: inline-block;
    width: 50%;
    vertical-align:top;
    .form--image__flex-box{
      flex-wrap: wrap;
      display: flex;
      justify-content: space-around;
      max-width: 600px;
      margin: 0 auto;
      .first-image{
      }
    }
  }

  .form--image-upload, .first-image  {
    flex: 0 0 50%;
    padding-top:50%;
    border: $chunky-border;
    border-radius: 0;
    background-size: contain;
    background-position: center;
    &:before, &:after{
      display: none;
    }
  }

  .first-image {
    width: 50%;
    display: inline-block;
    margin: 0;
  }
</style>
<template>
  <view class="form--image-container">
    <button class="first-image" id="0" @tap="chooseImage" style="{{firstImageStyle}}"></button>
    <view class="form--image-inner">
      <view class="form--image__flex-box">
        <button class="form--image-upload" id="1" @tap="chooseImage" style="{{secondImageStyle}}"/>
        <button class="form--image-upload" id="2" @tap="chooseImage" style="{{thirdImageStyle}}"/>
        <button class="form--image-upload" id="3" @tap="chooseImage" style="{{fourthImageStyle}}"/>
        <button class="form--image-upload" id="4" @tap="chooseImage" style="{{fifthImageStyle}}"/>
      </view>
    </view>
  </view>
</template>
<script>
  import wepy from 'wepy'
  import Lean from '@/utils/av-weapp-min'

  export default class ImageUploader extends wepy.component {
    props = {
      images: {
        type: Array,
        twoWay: true
      },
      animalId: {
        type: String
      }
    }
    data = {}
    methods = {
      chooseImage ({target}) {
        const index = target.id
        wepy.chooseImage({count: 1})
          .then(({tempFilePaths}) => {
            const file = new Lean.File(index, {
              blob: {
                uri: tempFilePaths[0]
              }
            })
            file.set({animalId: this.animalId, index: parseInt(index)})
            return file.save()
          })
          .then(savedFile => {
            this.images.push(savedFile.attributes.url)
            this.$apply()
          })
          .catch(err => console.error(err))
      }
    }

    computed = {
      firstImageStyle () {
        const styleProps = this.generateStyle(0)
        return styleProps
      },
      secondImageStyle () {
        const styleProps = this.generateStyle(1)
        return styleProps
      },
      thirdImageStyle () {
        const styleProps = this.generateStyle(2)
        return styleProps
      },
      fourthImageStyle () {
        const styleProps = this.generateStyle(3)
        return styleProps
      },
      fifthImageStyle () {
        const styleProps = this.generateStyle(4)
        return styleProps
      }
    }

    generateStyle (index) {
      const image = this.images[index]
      if (image) {
        return `background: url(${image}) no-repeat center; background-size: cover; background-color: #E5E5E5;`
      } else {
        return `background: url("http://ac-tSaB7MBC.clouddn.com/9a00a48126f37fc1b73b.svg") no-repeat center; background-size: contain;`
      }
    }

    onLoad () {
    }
  }
</script>
