<style lang="scss">
  @import "../styles/variables.scss";
  .form--image-container {
    display:flex;
    background-color: $white;
    border: $chunky-border;
  }

  .form--image-inner{
    display: inline-block;
    width: 50%;
    vertical-align:top;
    .form--image__flex-box{
      flex-wrap: wrap;
      display: flex;
      justify-content: space-around;
      max-width: 600px;
      margin: 0 auto;
      .form--image-upload{
        position: relative;
      }
    }
  }

  .form--image-upload, .first-image  {
    flex: 0 0 50%;
    padding-top:50%;
    border: $chunky-border;
    border-radius: 0;
    background-size: contain;
    background-position: center;
    &:before, &:after{
      display: none;
    }
  }

  .first-image {
    width: 50%;
    display: inline-block;
    margin: 0;
    border: $chunky-border;
  }
  .form--image-upload .image-loading {
    width: 30px;
    height: 30px;
  }
</style>
<template>
  <view class="form--image-container">
    <button class="first-image" id="0" @tap="chooseImage" style="{{firstImageStyle}}">
      <view class="image-loading" wx:if="{{loadingArray[0].loading}}"/>
    </button>
    <view class="form--image-inner">
      <view class="form--image__flex-box">
        <button class="form--image-upload"
                id="1"
                @tap="chooseImage"
                style="{{secondImageStyle}}">
          <view class="image-loading" wx:if="{{loadingArray[1].loading}}"/>
        </button>
        <button class="form--image-upload"
                id="2"
                @tap="chooseImage"
                style="{{thirdImageStyle}}">
          <view class="image-loading" wx:if="{{loadingArray[2].loading}}"/>
        </button>
        <button class="form--image-upload"
                id="3"
                @tap="chooseImage"
                style="{{fourthImageStyle}}">
          <view class="image-loading" wx:if="{{loadingArray[3].loading}}"/>
        </button>
        <button class="form--image-upload"
                id="4"
                @tap="chooseImage"
                style="{{fifthImageStyle}}">
          <view class="image-loading" wx:if="{{loadingArray[4].loading}}"/>
        </button>
      </view>
    </view>
  </view>
</template>
<script>
  import wepy from 'wepy'
  import Lean from '@/utils/av-weapp-min'

  export default class ImageUploader extends wepy.component {
    props = {
      images: {
        type: Array,
        twoWay: true
      },
      animalId: {
        type: String
      }
    }
    data = {
      loadingArray: [
        {loading: false},
        {loading: false},
        {loading: false},
        {loading: false},
        {loading: false}
      ]
    }
    methods = {
      chooseImage ({target}) {
        const index = parseInt(target.id)
        this.loadingArray[index].loading = true
        this.$apply()
        wepy.chooseImage({count: 1})
          .then(({tempFilePaths}) => {
            const name = `${this.animalId}_${index.toString()}`
            const file = new Lean.File(name, {
              blob: {
                uri: tempFilePaths[0]
              }
            })
            file.set({animalId: this.animalId, index: index})
            return file.save()
          })
          .then(savedFile => {
            this.images[index] = savedFile.attributes.url
            this.loadingArray[index].loading = false
            this.$apply()
          })
          .catch(err => {
            this.loadingArray[index].loading = false
            this.$apply()
            console.error(err)
          })
      }
    }

    computed = {
      firstImageStyle () {
        const styleProps = this.generateStyle(0)
        return styleProps
      },
      secondImageStyle () {
        const styleProps = this.generateStyle(1)
        return styleProps
      },
      thirdImageStyle () {
        const styleProps = this.generateStyle(2)
        return styleProps
      },
      fourthImageStyle () {
        const styleProps = this.generateStyle(3)
        return styleProps
      },
      fifthImageStyle () {
        const styleProps = this.generateStyle(4)
        return styleProps
      }
    }

    generateStyle (index) {
      const image = this.images[index]
      if (this.loadingArray[index].loading) {
        return `background-color: transparent;`
      }
      if (image) {
        return `background: url(${image}) no-repeat center; background-size: cover; background-color: #E5E5E5;`
      } else {
        return `background: url("http://ac-tSaB7MBC.clouddn.com/9a00a48126f37fc1b73b.svg") no-repeat center; background-size: contain;`
      }
    }
  }
</script>
