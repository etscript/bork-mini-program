<style lang="scss" src="../styles/_forms.scss">
</style>
<template>
  <view class="container padbox--default">
    <view class="form--title">{{t.title}}</view>
    <view class="form--subtitle">{{t.subtitle}}</view>
    <tabswiper :tabs.sync="tabs" :activetab.sync="activetab">
      <tabswiperitem>
        <view class="padbox--default">
          <view class="flex--parent__center">
            <view class="edit-profile--avatar-outer" @tap="switchImage">
              <image class="avatar__large" src="{{userData.avatarUrl}}" mode="aspectFit"/>
              <view class="icon">
                <view class="icon--edit"/>
              </view>
            </view>
          </view>
          <view class="padbox--topbottom">
            <view class="form-item--default">
              <view class="form-item--label">
                <view class="form-item--label-inner">{{t.nickname}}</view>
              </view>
              <input type="text"
                      class="form-item--input"
                      value="{{userData.nickName}}"
                      @blur="handleNickname"
                      maxlength="70" confirm-type="next" />
            </view>
            <view class="form-item--default">
              <view class="form-item--label">
                <view class="form-item--label-inner">{{t.place}}</view>
              </view>
              <input type="text"
                      class="form-item--input"
                      value="{{userData.province}}"
                      @blur="handleLocation"
                      maxlength="70" confirm-type="next" />
            </view>
            <view class="form-item--default">
              <view class="form-item--label">
                <view class="form-item--label-inner">
                  {{t.wechat}}
                </view>
              </view>
              <input type="text" 
                    placeholder="{{t.wechat_placeholder}}" 
                    class="form-item--input" 
                    @blur="handleWx"
                    maxlength="70" 
                    confirm-type="next" 
                    value="{{userData.wxUsername}}"/>
            </view>
            <view class="form-item--default">
              <view class="form-item--label">
                <view class="form-item--label-inner">
                  {{t.self_intro}}
                </view>
              </view>
              <input type="text" 
                    class="form-item--input" 
                    @blur="handlePersonal" 
                    confirm-type="next" 
                    maxlength="200" 
                    value="{{userData.personalNote}}" 
                    placeholder="{{t.intro_explanation}}" />
            </view>
            <view class="form-item--default">
              <view class="form-item--label">
                <view class="form-item--label-inner">
                  {{t.age}}
                </view>
              </view>
              <input type="number" 
                    placeholder="{{t.age_placeholder}}" 
                    class="form-item--input" 
                    @blur="handleAge" 
                    maxlength="3" 
                    confirm-type="next" 
                    value="{{userData.age}}"/>
            </view>
          </view>
          <button class="btn--default" @tap="saveProfile">{{t.save_profile}}</button>
        </view>
      </tabswiperitem>
      <tabswiperitem2>
        <view class="padbox--default">
          <view class="text-center">{{t.userpass_explanation}}</view>
          <view class="padbox--topbottom">
            <view class="form-item--default">
              <view class="form-item--label">{{t.username}}</view>
              <input type="text" class="form-item--input" @blur="handleUsername" confirm-type="next" maxlength="200" value="{{userData.username}}" placeholder="{{t.username}}" />
            </view>
            <view class="form-item--default">
              <view class="form-item--label">{{t.password}}</view>
              <input type="password" class="form-item--input" @blur="handlePassword" confirm-type="next" maxlength="200" placeholder="{{t.password_placeholder}}" />
            </view>
          </view>
          <button class="btn--default" @tap="saveUsernamePassword">{{t.save_auth_info}}</button>
        </view>
      </tabswiperitem2>
    </tabswiper>
  </view>
  <errormodal/>
  <fidoloader/>
</template>
<script>
  import wepy from 'wepy'
  import LocalesMixin from '@/mixins/localesmixin'
  import TabSwiper from '@/components/tab-swiper'
  import TabSwiperItem from '@/components/tab-swiper-item'
  import ErrorModal from '@/components/error-modal'
  import FidoLoader from '@/components/fido-loader'
  import {checkSensitive, _invalidPassword} from '@/utils/regex'
  import _checkEmptyFields from '@/utils/checkemptyfields'
  import _pick from 'lodash.pick'
  export default class EditProfile extends wepy.page {
    data = {
      userData: {},
      tabs: [],
      activetab: 'info',
      newPassword: null
    }

    components = {
      tabswiper: TabSwiper,
      tabswiperitem: TabSwiperItem,
      tabswiperitem2: TabSwiperItem,
      errormodal: ErrorModal,
      fidoloader: FidoLoader
    }

    watch = {
      t () {
        const info = {name: 'info', t: this.t.personal_info}
        const auth = {name: 'auth', t: this.t.username_password}
        this.tabs = [info, auth]
        this.$apply()
      }
    }

    mixins = [LocalesMixin]

    methods = {
      switchImage () {
        this._switchImage()
      },
      handleLocation ({detail}) {
        const isSensitive = checkSensitive(detail.value)
        if (isSensitive) {
          this.userData.province = ''
          return this.handleSensitiveWord()
        }
        this.userData.province = detail.value
        this.$apply()
      },
      handleNickname ({detail}) {
        const isSensitive = checkSensitive(detail.value)
        if (isSensitive) {
          this.userData.nickName = ''
          return this.handleSensitiveWord()
        }
        this.userData.nickName = detail.value
        this.$apply()
      },
      handleWx ({detail}) {
        const isSensitive = checkSensitive(detail.value)
        if (isSensitive) {
          this.userData.wxUsername = ''
          return this.handleSensitiveWord()
        }
        this.userData.wxUsername = detail.value
        this.$apply()
      },
      handlePersonal ({detail}) {
        const isSensitive = checkSensitive(detail.value)
        if (isSensitive) {
          this.userData.personalNote = ''
          return this.handleSensitiveWord()
        }
        this.userData.personalNote = detail.value
        this.$apply()
      },
      handleAge ({detail}) {
        this.userData.age = detail.value
        this.$apply()
      },
      handleUsername ({detail}) {
        this.userData.username = detail.value
        this.$apply()
      },
      handlePassword ({detail}) {
        this.newPassword = detail.value
        this.$apply()
      }
    }

    computed = {
      hasEmptyProfileFields () {
        return _checkEmptyFields(this.serializeData())
      }
    }

    async saveUsernamePassword () {
      if (this.userData.username && this.newPassword) {
        this.handleUandP()
      } else if (!this.userData.username && this.newPassword) {
        this.handleJustP()
      } else if (this.userData.username && !this.newPassword) {
        this.handleJustU()
      } else if (!this.userData.username && !this.newPassword) {
        const message = this.t.empty_u_an_p
        const params = {header: this.error_header, message}
        return this.$invoke('errormodal', 'showMessage', params)
      }
    }

    async handleUandP () {
      if (this.checkEmptyUserPass()) {
        this.$invoke('fidoloader', 'showLoading', null)
        try {
          const userNamePromise = this.$parent.globalData.user.updateUsername(this.userData.username)
          const passPromise = this.$parent.globalData.user.updateUserPass(this.newPassword)
          await Promise.all([passPromise, userNamePromise])
          this.$invoke('fidoloader', 'hideLoading', null)
        } catch (error) {
          this.$invoke('fidoloader', 'hideLoading', null)
          const params = {header: this.error_header, message: error}
          return this.$invoke('errormodal', 'showMessage', params)
        }
      }
    }

    async handleJustP () {
      try {
        this.$invoke('fidoloader', 'showLoading', null)
        await this.$parent.globalData.user.updateUserPass(this.newPassword)
        this.$invoke('fidoloader', 'hideLoading', null)
      } catch (error) {
        this.$invoke('fidoloader', 'hideLoading', null)
        const params = {header: this.error_header, message: error}
        return this.$invoke('errormodal', 'showMessage', params)
      }
    }

    async handleJustU () {
      try {
        this.$invoke('fidoloader', 'showLoading', null)
        await this.$parent.globalData.user.updateUsername(this.userData.username)
        this.$invoke('fidoloader', 'hideLoading', null)
      } catch (error) {
        this.$invoke('fidoloader', 'hideLoading', null)
        console.error(error)
      }
    }

    checkEmptyUserPass () {
      const invalid = _invalidPassword(this.newPassword)
      if (invalid) return this.handleUPError(invalid)
      if (_checkEmptyFields({field: this.userData.username})) return this.handleUPError(`${this.t.error_message}: ${this.t.username}`)
      return true
    }

    handleUPError (error) {
      let message = error
      const params = {header: this.error_header, message}
      return this.$invoke('errormodal', 'showMessage', params)
    }

    async saveProfile () {
      if (this.hasEmptyProfileFields) return this.handleEmptyFields()
      try {
        this.$invoke('fidoloader', 'showLoading', null)
        await this.$parent.globalData.user.updateProfileInfo(this.serializeData())
        this.$invoke('fidoloader', 'hideLoading', null)
      } catch (error) {
        console.error(error)
      }
    }

    handleEmptyFields () {
      let message = this.t.error_message
      const field = this.hasEmptyProfileFields[0]
      message = `${message}: ${this.t[field]}`
      const params = {header: this.t.error_header, message}
      return this.$invoke('errormodal', 'showMessage', params)
    }
  
    serializeData () {
      const fields = _pick(this.userData,
        ['nickName'], ['province'], ['avatarUrl'], ['wxUsername'], ['personalNote'], ['age'])
      return fields
    }

    async _switchImage () {
      try {
        await this.$parent.globalData.user.requestPicture()
        const {tempFilePaths} = await wepy.chooseImage({count: 1})
        const {url} = await this.$parent.globalData.user.uploadPicture(tempFilePaths[0])
        this.userData.avatarUrl = url
        this.$apply()
      } catch (err) {
        console.error(err)
      }
    }

    handleSensitiveWord () {
      const params = {header: this.t.sensitive_word_header, message: this.t.sensitive_word}
      return this.$invoke('errormodal', 'showMessage', params)
    }

    onPullDownRefresh () {
      wepy.stopPullDownRefresh()
    }

    onLoad () {
      this.userData = this.$parent.globalData.user.data
      this.$apply()
    }
  }
</script>
