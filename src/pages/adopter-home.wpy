<style lang="scss">
  .something{
    color: pink;
  }
</style>
<template>
  <view class="container">
    <profileheader :userInfo.sync="userInfo"/>
    <tabswiper :tabs.sync="tabs" :activetab.sync="activetab">
      <tabswiperitem1>
        <view class="home--blank" wx:if="{{likesEmpty && !likesLoading}}">{{t.likes_empty}}</view>
        <inlineloading1 :isopen.sync="likesLoading"/>
        <repeat for="{{likes}}" index="index" item="like" key="index">
          <animallistitem :animalObj.sync="like"/>
        </repeat>
      </tabswiperitem1>
      <tabswiperitem2>
        <inlineloading2 :isopen.sync="appsLoading"/>
        <repeat for="{{apps}}" index="index" item="app" key="index">
          <applicationlistitem :application.sync="app" :isowner.sync="isOwner"/>
        </repeat>
      </tabswiperitem2>
    </tabswiper>
  </view>
</template>
<script>
  import wepy from 'wepy'
  import LocalesMixin from '@/mixins/localesmixin'
  import ProfileHeader from '@/components/profile-header'
  import TabSwiper from '@/components/tab-swiper'
  import TabSwiperItem from '@/components/tab-swiper-item'
  import InlineLoading from '@/components/inline-loading'
  import ApplicationListItem from '@/components/application-list-item'
  import AnimalListItem from '@/components/animal-list-item'

  export default class AdopterHome extends wepy.page {
    data = {
      activetab: '',
      loading: true,
      isOwner: false,
      userInfo: {},
      tabs: [],
      apps: [],
      likes: [],
      likesEmpty: false,
      appsEmpty: false,
      appsLoading: false,
      likesLoading: false
    }

    components = {
      profileheader: ProfileHeader,
      tabswiper: TabSwiper,
      tabswiperitem1: TabSwiperItem,
      tabswiperitem2: TabSwiperItem,
      applicationlistitem: ApplicationListItem,
      animallistitem: AnimalListItem,
      inlineloading1: InlineLoading,
      inlineloading2: InlineLoading
    }

    mixins = [LocalesMixin]

    watch = {
      t () {
        const likes = {name: 'likes', t: this.t.likes}
        const apps = {name: 'applications', t: this.t.applications}
        this.tabs = [likes, apps]
        this.$apply()
      },
      activetab (newVal, oldVal) {
        if (newVal === 'likes') return this.fetchLikes()
        if (newVal === 'applications') return this.fetchApps()
      }
    }

    methods = {}

    computed = {}

    onLoad ({tab}) {
      this.userInfo = this.$parent.globalData.user.attributes
      this.activetab = tab
      this.$apply()
    }

    async fetchLikes () {
      this.likesLoading = true
      const likes = await this.$parent.globalData.user.fetchLikes(true)
      this.likes = likes.map(like => like.animal)
      this.likesEmpty = likes.length < 1
      this.likesLoading = false
      this.$apply()
    }

    async fetchApps () {
      this.appsLoading = true
      const apps = await this.$parent.globalData.user.fetchApplications(true)
      this.apps = apps
      this.appsEmpty = apps.length < 1
      this.appsLoading = false
      this.$apply()
    }
  }
</script>
