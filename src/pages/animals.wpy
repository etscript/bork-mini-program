<style lang="scss">
  @import "../styles/variables.scss";
  .animals--list-outer {
    padding: $default-padding;
    transition: all 0.3s ease;
    padding-top: 50px;
  }
  .animals--location-picker {
    position: fixed;
    transition: all 0.3s ease;
    left: 0;
    right: 0;
  }
  .animals--loading{
    position: fixed;
    background-color: $white;
    width: 100%;
    left: 0;
    right: 0;
  }
  .animals--filter-item {
    display: flex;
    text-align: left;
    padding: 10rpx 0;
    color: $black!important;
    .animals--filter-label {
      vertical-align: middle;
      line-height:2;
      flex:0 0 80rpx;
    }
  }
  .slider--label{
    vertical-align: middle;
    line-height:2;
  }
  .slider--amount {
    font-size: $font-xs;
    vertical-align: middle;
    line-height: 3;
  }
  .animals--slider {
    flex-grow: 1;
  }
  .animals--blank {
    margin-top: 30vh;
  }
</style>
<template>
  <view class="container__no-overflow">
    <locationselector :point.sync="defaultCoordinates" :stickyMap.sync="stickyMap"/>
    <animalfilter :isOpen.sync="filterOpen">
      <view class="animals--filter-item">
        <view class="animals--filter-label">{{t.type}}</view>
        <radiolist1 :currentchoice.sync="currentType" :choices.sync="typeChoices"/>
      </view>
      <view class="animals--filter-item">
        <view class="animals--filter-label">{{t.gender}}</view>
        <radiolist2 :currentchoice.sync="currentGender" :choices.sync="genderChoices"/>
      </view>
      <view class="animals--filter-item">
        <view class="slider--label">{{t.age_range_minimum}}</view>
          <slider @change="handleMinChange"
                  class="animals--slider"
                  backgroundColor="#E5E5E5"
                  activeColor="#3D3B5A"
                  block-color="#333333"/>
          <view class="slider--amount">{{minAgeText}}</view>
      </view>
      <view class="animals--filter-item">
        <view class="slider--label">{{t.age_range_maximum}}</view>
          <slider @change="handleMaxChange"
                  class="animals--slider"
                  backgroundColor="#E5E5E5"
                  activeColor="#3D3B5A"
                  block-color="#333333"/>
          <view class="slider--amount">{{maxAgeText}}</view>
      </view>
    </animalfilter>
    <scroll-view class="animals--list-outer"
                scroll-y="{{scrollY}}"
                bindscrolltolower="scrollBottom"
                style="height: 100vh;">
      <repeat for="{{rawAnimals}}" key="index" item="animal" index="index">
        <animalsearchitem :animal.sync="animal" @like.user="handleLike"/>
      </repeat>
      <view class="home--blank animals--blank" wx:if="{{rawAnimals.length === 0 && !preload && !animalsLoading}}">{{t.no_results}}</view>
    </scroll-view>
    <view class="animals--loading" style="bottom: {{preload ? '50%' : '0' }}; display: {{animalsLoading ? 'block' : 'none'}};">
      <inlineloading :isopen.sync="animalsLoading">
        {{t.loading_animals}}
      </inlineloading>
    </view>
  </view>
  <flash/>
  <unregisteredmodal/>
</template>
<script>
  import wepy from 'wepy'
  import LocalesMixin from '@/mixins/localesmixin'
  import AnimalMixin from '@/mixins/animal-mixin'
  import AnimalSearchItem from '@/components/animal-search-item'
  import AnimalFilter from '@/components/animal-filter'
  import Flash from '@/components/flash'
  import LocationSelector from '@/components/location-selector'
  import InlineLoading from '@/components/inline-loading'
  import UnregisteredModal from '@/components/unregistered-modal'
  import RadioList from '@/components/radiolist'
  import _isEmpty from 'lodash.isempty'
  import {_daysToString} from '@/utils/age-fns'

  export default class Animals extends wepy.page {
    mixins = [LocalesMixin, AnimalMixin]

    components = {
      animalsearchitem: AnimalSearchItem,
      locationselector: LocationSelector,
      inlineloading: InlineLoading,
      animalfilter: AnimalFilter,
      flash: Flash,
      unregisteredmodal: UnregisteredModal,
      radiolist1: RadioList,
      radiolist2: RadioList
    }

    data = {
      scrollY: true,
      calcHeight: 500,
      currentPage: 0,
      preload: true,
      animals: [],
      stickyMap: true,
      filterOpen: false,
      defaultCoordinates: {},
      genderChoices: [],
      typeChoices: [],
      currentType: '',
      currentGender: 'all'
    }

    watch = {
      t () {
        this.genderChoices = [
          {name: this.t.male, value: 'male'},
          {name: this.t.female, value: 'female'},
          {name: this.t.all_genders, value: 'all'}
        ]
        this.typeChoices = [
          {name: this.t.dogs, value: 'dog'},
          {name: this.t.cats, value: 'cat'},
          {name: this.t.other, value: 'other'},
          {name: this.t.all_types, value: 'all'}
        ]
      },
      defaultCoordinates (newVal, oldVal) {
        if (!_isEmpty(oldVal)) {
          this.params.currentCoordinates = this.defaultCoordinates
          this.resetParamsAndFetch()
          this.$apply()
        }
      },
      params (newVal, oldVal) {
        this.defaultCoordinates = this.params.currentCoordinates
        this.currentGender = this.params.gender
        this.currentType = this.params.type
        this.$apply()
      },
      currentGender (newVal, oldVal) {
        if (newVal !== oldVal) {
          this.params.gender = this.currentGender
          this.resetParamsAndFetch()
          this.$apply()
        }
      },
      currentType (newVal, oldVal) {
        if (newVal !== oldVal) {
          this.params.type = this.currentType
          this.resetParamsAndFetch()
          this.$apply()
        }
      }
    }

    computed = {
      minAgeText () {
        if (this.params.minAge) {
          return _daysToString(this.params.minAge.toFixed())
        } else {
          return this.t && this.t.no_limit ? this.t.no_limit : ''
        }
      },
      maxAgeText () {
        if (!this.t) return ''
        if (this.params.maxAge) {
          return _daysToString(this.params.maxAge.toFixed())
        } else {
          return this.t && this.t.no_limit ? this.t.no_limit : ''
        }
      }
    }

    methods = {
      handleLike (params) {
        const userId = this.$parent.globalData.user.objectId
        if (!this.$parent.globalData.user.isRegistered) {
          return this.$invoke('unregisteredmodal', 'openModal', '')
        } else if (params.owner === userId) {
          const message = this.t.you_are_the_owner
          this.$invoke('flash', 'showMessage', message)
        } else {
          this.submitLike(params.animal)
        }
      },
      handleMinChange ({detail}) {
        let x = parseInt(detail.value)
        if (x !== 0) {
          x = this.calcAgeFactor(x)
        } else {
          x = false
        }
        this.params.minAge = x
        this.$apply()
        this.resetParamsAndFetch()
      },
      handleMaxChange ({detail}) {
        let x = parseInt(detail.value)
        if (x !== 0) {
          x = this.calcAgeFactor(x)
        } else {
          x = false
        }
        this.params.maxAge = x
        this.$apply()
        this.resetParamsAndFetch()
      }
    }

    calcAgeFactor (x) {
      let y = 36.7272727272727272 // only when x is over 90
      if (x < 30) y = 2
      if (x > 30 && x < 50) y = 8
      if (x > 50 && x < 70) y = 16
      if (x > 70 && x < 90) y = 32
      return ((x - 1) * y) + 14
    }

    async scrollBottom () {
      if (!this.animalsLoading && !this.lastPage) {
        this.animalsLoading = true
        this.page++
        this.$apply()
        await this.fetchAnimals()
        this.animalsLoading = false
        this.$apply()
      }
    }

    async submitLike (id) {
      try {
        const likes = await this.$parent.globalData.user.fetchLikes()
        const hasLiked = !_isEmpty(likes.find(like => like.animal.objectId === id))
        if (hasLiked) return this.submitUnLike(id)
        await this.$parent.globalData.user.submitLike(id)
        this.hasLiked = true
        this.$apply()
      } catch (err) {
        console.error(err)
      }
    }

    async submitUnLike (id) {
      try {
        await this.$parent.globalData.user.submitUnLike(id)
        this.hasLiked = false
        this.$apply()
      } catch (err) {
        console.error(err)
      }
    }

    async onLoad ({type}) {
      this.params.type = type
      const screenHeight = wx.getSystemInfoSync().windowHeight
      this.calcHeight = screenHeight - 50
      try {
        await this.$parent.globalData.user.requestLocation()
        const {latitude, longitude} = await wepy.getLocation()
        this.params.currentCoordinates = {latitude, longitude}
        await this.fetchAnimals()
        this.preload = false
        this.$apply()
      } catch (err) {
        console.error(err)
      }
    }
  }
</script>
