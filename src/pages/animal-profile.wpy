<style lang="scss">
  @import "../styles/variables.scss";
  .animal--swiper {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    z-index: 9;
  }
  .animal--body {
    z-index: 10;
    background-color: $white;
    position:relative;
  }
  .animal--swiper-image {
    width: 100%;
    padding-top:100%;
    background-size: cover;
    background-repeat: no-repeat;
  }
  .animal--header {
    width: 100%;
    padding: $default-padding / 2 $default-padding;
    justify-content:space-between;
    align-items:center;
    .age{
      display:inline-block;
      padding: 10rpx;
      background-color: $black;
      color: $white;
      font-size: $font-small;
      vertical-align:middle;
    }
  }
  .animal--big-name {
    color: $black;
    font-size: $font-big-title;
    font-weight: 500;
  }
  .animal--neighborhood{
    padding: 0 $default-padding;
    margin-left:-20rpx;
    .icon--location{
      vertical-align:top;
      margin: 0;
    }
    .neighborhood {
      color: $black;
      font-size: $font-small;
      font-weight: 200;
      display:inline-block;
    }
  }

  .animal--status {
    border-radius: 50%;
  }

  .animal--section{
    padding: $default-padding / 2 $default-padding;
  }

  .animal--check {
    margin: 10rpx 0;
    color: $black;
    text-decoration: line-through;
    &:before {
      content: '';
      border-radius: 50%;
      width:40rpx!important;
      height:40rpx!important;
      background-color: $light-grey;
      background-repeat:no-repeat;
      background-position:center;
      background-size:80%;
      display:inline-block;
      margin-right:10rpx;
      vertical-align:middle;
    }
  }
  .animal--check.checked {
    opacity: 1;
    text-decoration: none;
    &:before{
      background-color: $color-primary;
      background-image: url("https://up.img.heidiancdn.com/o_1c0o37aq312v91kk4mrdbobb0k0hecked.png");
    }
  }
  .animal--quotation{
    padding: $default-padding;
    position: relative;
    text-align: center;
    font-size: $font-medium-title;
    color: $black;
    font-style: italic;
    .quote-begin{
      position: absolute;
      left:0;
      top: 40rpx;
    }
    .quote-end{
      position: absolute;
      right: 0;
      bottom:40rpx;
    }
  }
  .animal--owner-info{
    text-align:center;
    color: $black;
    padding: $default-padding / 2 0;
  }
  .owner--inner{
    text-align: center;
    padding:20rpx;
    color: $black;
  }
</style>
<template>
  <view class="container__has-tabbar" style="padding-top:{{calcHeight}}px;">
    <swiper class="animal--swiper"
            indicator-dots="{{indicatorDots}}"
            indicator-color="#0d0a31"
            indicator-active-color="#ffffff"
            style="height:{{calcHeight}}px;">
      <repeat for="{{animalInfo.images}}" item="image" index="index" key="index">
        <swiper-item>
          <view class="animal--swiper-image" style="background-image:url({{image}});"></view>
        </swiper-item>
      </repeat>
    </swiper>
    <view class="animal--body">
      <view class="animal--header flex--parent__horizontal">
        <view class="animal--big-name">
          {{animalInfo.name}}
          <view class="icon--male" wx:if="{{animalInfo.gender === 'male'}}"/>
          <view class="icon--female" wx:if="{{animalInfo.gender === 'female'}}"/>
          <view class="age">{{animalAgeText}}</view>
        </view>
      </view>
      <view class="animal--neighborhood">
        <view class="icon--location"/>
        <view class="neighborhood">
          {{animalInfo.neighborhood}}
        </view>
      </view>
      <view class="animal--section">
        <view class="animal--check {{animalInfo.fixed ? 'checked' : ''}}">{{t.fixed}}</view>
        <view class="animal--check {{animalInfo.available ? 'checked' : ''}}">{{t.available}}</view>
        <view class="animal--check {{animalInfo.vaccinated ? 'checked' : ''}}">{{t.vaccines}}</view>
      </view>
      <view class="animal--section">
        <view class="animal--quotation">
          <view class="quote-begin"/>
          {{animalInfo.intro}}
          <view class="quote-end"/>
        </view>
        <view class="animal--owner-info">
          <image class="avatar__large" src="{{animalInfo.user.avatarUrl}}"/>
          <view class="owner--inner">
            {{t.rescuer}}: {{animalInfo.user.nickName}}
          </view>
        </view>
      </view>
    </view>
  </view>
  <bottombar>
    <button class="bottom-bar-btn"
            @tap="likeAnimal"
            wx:if="{{!hasLiked}}"
            disabled="{{likeButtonDisabled}}">
      <view class="icon--like"/>{{t.like}}
    </button>
    <button class="bottom-bar-btn"
            @tap="likeAnimal"
            wx:if="{{hasLiked}}"
            disabled="{{likeButtonDisabled}}">
      <view class="icon--like"/>{{t.already_liked}}
    </button>
    <button class="bottom-bar-btn" @tap="showApplication">
      <view class="icon--apply"/>{{t.adopt_cta}}
    </button>
    <button class="bottom-bar-btn__small" @tap="showShare">
      <view class="icon--share"/>
    </button>
  </bottombar>
  <unregisteredmodal/>
  <applicationmodal @submit.user="handleAppSubmit"/>
  <flash/>
  <fidoloader/>
  <bottomdrawer :items.sync="shareDrawerItems" @itemtap.user="handleShareItem"/>
</template>
<script>
  import wepy from 'wepy'
  import AnimalMixin from '@/mixins/animal-mixin'
  import LocalesMixin from '@/mixins/localesmixin'
  import BottomBar from '@/components/bottom-bar'
  import Flash from '@/components/flash'
  import ApplicationModal from '@/components/application-modal'
  import BottomDrawer from '@/components/bottom-drawer'
  import UnregisteredModal from '@/components/unregistered-modal'
  import FidoLoader from '@/components/fido-loader'
  import _isEmpty from 'lodash.isempty'

  export default class AnimalProfile extends wepy.page {
    data = {
      indicatorDots: true,
      loading: false,
      calcHeight: 0,
      animal: '',
      userId: '',
      isOwner: false,
      isRegistered: false,
      animalAgeText: '',
      shareDrawerItems: [],
      hasLiked: false,
      hasApplied: false,
      likeButtonDisabled: false
    }

    components = {
      bottombar: BottomBar,
      unregisteredmodal: UnregisteredModal,
      flash: Flash,
      bottomdrawer: BottomDrawer,
      applicationmodal: ApplicationModal,
      fidoloader: FidoLoader
    }

    mixins = [AnimalMixin, LocalesMixin]
    watch = {
      loading () {
        if (this.loading) {
          this.$invoke('fidoloader', 'showLoading', '')
        } else {
          this.$invoke('fidoloader', 'hideLoading', '')
        }
      },
      t () {
        this.shareDrawerItems = [
          {name: this.t.send_friends, value: 'send_friends', isShare: true},
          {name: this.t.qr_code, value: 'qr_code', isShare: false}]
        this.$apply()
      },
      animalInfo () {
        this.animalAgeText = `${this.animalInfo.age} ${this.t[this.animalInfo.ageUnit]}`
        this.$apply()
      }
    }
    computed = {}
    methods = {
      likeAnimal () {
        if (!this.isRegistered) {
          this.$invoke('unregisteredmodal', 'openModal', '')
        } else if (this.isOwner) {
          const message = this.t.you_are_the_owner
          this.$invoke('flash', 'showMessage', message)
        } else {
          if (!this.hasLiked) {
            this.handleLike()
          } else {
            this.handleUnLike()
          }
        }
      },
      showApplication () {
        if (!this.isRegistered) {
          this.$invoke('unregisteredmodal', 'openModal', '')
        } else if (this.isOwner) {
          const message = this.t.you_are_the_owner
          this.$invoke('flash', 'showMessage', message)
        } else {
          if (!this.hasApplied) {
            this.$invoke('applicationmodal', 'showModal', this.animalInfo.name)
          } else {
            const message = this.t.you_already_submitted
            this.$invoke('flash', 'showMessage', message)
          }
        }
      },
      showShare () {
        this.$invoke('bottomdrawer', 'showDrawer', '')
      },
      handleShareItem (param) {
        if (param === 'send_friends') {
          wepy.showShareMenu()
            .then(res => console.log(res))
            .catch(err => console.error(err))
        }
      },
      handleAppSubmit (message) {
        this.loading = true
        this.$invoke('applicationmodal', 'hideModal', '')
        const owner = this.animalInfo.user.objectId
        this.$parent.globalData.user.submitApplication(this.animal, owner, message)
          .then(res => {
            const successMessage = this.t.successfully_applied
            this.hasApplied = true
            setTimeout(() => {
              this.loading = false
              this.$invoke('flash', 'showMessage', successMessage)
              this.$apply()
            }, 500)
            console.log(res)
          })
          .catch(err => console.error(err))
      }
    }

    onLoad ({animal}) {
      console.log('onload hehe')
      this.loading = true
      this.animal = animal
      this.isRegistered = this.$parent.globalData.user.isRegistered
      this.setScreenHeight()
      this.checkLikesAndApps()
    }

    onShareAppMessage (res) {
      let self = this
      return {
        title: this.animalInfo.name,
        path: `page/animal-profile?animal=${this.animal}`,
        imageUrl: this.animalInfo.images[0],
        success () {
          self.$invoke('flash', 'showMessage', self.t.successful_share)
        }
      }
    }

    setScreenHeight () {
      const screenWidth = wx.getSystemInfoSync().screenWidth
      this.calcHeight = screenWidth
      this.$apply()
    }
    async checkLikesAndApps () {
      try {
        const likesReq = this.$parent.globalData.user.fetchLikes()
        const appsReq = this.$parent.globalData.user.fetchApplications(true)
        const animalReq = this.fetchAnimalDetails(this.animal)
        const [likes, apps] = await Promise.all([likesReq, appsReq, animalReq])
        this.hasLiked = !_isEmpty(likes.find(like => like.animal.objectId === this.animal))
        this.hasApplied = !_isEmpty(apps.find(app => app.animal.objectId === this.animal))
        setTimeout(() => {
          this.loading = false
          this.$apply()
        }, 500)
        this.$apply()
      } catch (err) {
        console.error(err)
      }
    }

    async fetchAnimalDetails (animal) {
      const userId = this.$parent.globalData.user.objectId
      try {
        const fields = [
          'name',
          'available',
          'fixed',
          'vaccinated',
          'gender',
          'images',
          'neighborhood',
          'type',
          'age',
          'ageUnit',
          'intro',
          'user.avatarUrl',
          'user.nickName',
          'user.objectId']
        await this.fetchAnimal(animal, fields)
        const animalsOwner = this.animalInfo.user.objectId
        if (animalsOwner === userId) {
          this.isOwner = true
        }
      } catch (err) {
        // handle this error, means the dog is not existing anymore probably
        return Promise.reject(new Error(err))
      }
    }

    async handleLike () {
      try {
        this.likeButtonDisabled = true
        await this.$parent.globalData.user.submitLike(this.animal)
        this.hasLiked = true
        this.likeButtonDisabled = false
        this.$apply()
      } catch (err) {
        console.error(err)
      }
    }

    async handleUnLike () {
      try {
        this.likeButtonDisabled = true
        await this.$parent.globalData.user.submitUnLike(this.animal)
        this.likeButtonDisabled = false
        this.hasLiked = false
        this.$apply()
      } catch (err) {
        console.error(err)
      }
    }
  }
</script>
