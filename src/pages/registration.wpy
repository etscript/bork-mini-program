<style lang="scss" src="../styles/_forms.scss"></style>
<template>
  <view class="container padbox--default">
    <view class="form--title">{{title}}</view>
    <view class="form--subtitle">{{subTitle}}</view>
    <formparent>
      <button class="btn--default__dark" 
              disabled="{{wechatDisabled}}" 
              open-type="getUserInfo"
              @getuserinfo="loginWithWechat">
        <image class="icon--inline" src="../icons/wechat_white.svg" mode="aspectFit"></image>
        {{t.login_with_wechat}}
      </button>
      <block wx:if="{{authData}}">
        <view class="form--group">
          <view class="form--group__title">{{t.basic_info}}</view>
          <view class="form-item--default">
            <view class="form-item--label">
              <view class="form-item--label-inner">{{t.name}}</view>
            </view>
            <view class="form-item--input">{{authData.nickName}}</view>
          </view>
          <view class="form-item--default">
            <view class="form-item--label">
              <view class="form-item--label-inner">{{t.place}}</view>
            </view>
            <view class="form-item--input">{{authData.province}}, {{authData.city}}</view>
          </view>
          <view class="form-item--default">
            <view class="form-item--label">
              <view class="form-item--label-inner">
                {{t.wechat}}
              </view>
            </view>
            <input type="text" placeholder="请输入你的微信号" class="form-item--input" @blur="handleWx" maxlength="70" confirm-type="next" value="{{wxUsername || ''}}"/>
          </view>
          <view class="form-item--default">
            <view class="form-item--label">
              <view class="form-item--label-inner">
                {{t.self_intro}}
              </view>
            </view>
            <input type="text" class="form-item--input" @blur="handlePersonal" confirm-type="next" maxlength="200" value="{{personalNote}}" placeholder="{{t.intro_explanation}}" />
          </view>
          <view class="form-item--default">
            <view class="form-item--label">
              <view class="form-item--label-inner">
                {{t.age}}
              </view>
            </view>
            <input type="number" placeholder="输入你的年龄请" class="form-item--input" @blur="handleAge" maxlength="3" confirm-type="next" value="{{age || ''}}"/>
          </view>
        </view>
        <view class="form--group">
          <view class="form--group__title">{{t.id_validation}}</view>
          <view class="form-item--default">
            <radiolist :choices.sync="idChoices" :currentchoice.sync="idType" :fullwidth="fullWidthButton"/>
          </view>
          <block wx:if="{{chooseChineseId}}">
            <view class="form-item--default">
              <view class="form-item--label">
                <view class="form-item--label-inner">
                  {{t.chinese_shenfenzheng_full}}
                </view>
              </view>
              <input type="idcard" placeholder="身份证" class="form-item--input" @blur="handleId" confirm-type="next"/>
            </view>
          </block>
            <block wx:else>
              <view class="form-item--default">
                <coolpicker @change.user="handleCountryChange" :collection.sync="countryChoices" :selection.sync="country" :label.sync="countryText"/>
              </view>
              <view class="form-item--default">
                <view class="form-item--label">
                  <view class="form-item--label-inner">
                    {{t.full_name}}
                  </view>
                </view>
                <input type="text" placeholder="请输入你的全法律上的姓名" class="form-item--input" @blur="handleFullName" maxlength="50" confirm-type="next" value="{{fullName || ''}}"/>
              </view>
              <view class="form-item--default">
                <view class="form-item--label">
                  <view class="form-item--label-inner">
                    {{t.passport}}
                  </view>
                </view>
                <input type="number" placeholder="请输入护照号" class="form-item--input" @blur="handleId" maxlength="50" confirm-type="next" value="{{idNumber || ''}}"/>
              </view>
          </block>
        </view>
        <button class="btn--default" @tap="handleSubmit">{{t.save}}</button>
      </block>
    </formparent>
  </view>
  <errormodal />
  <redirectmodal :navBack="navBack"/>
  <fidoloader/>
</template>
<script>
  import wepy from 'wepy'
  import FormParent from '@/components/form-parent'
  import RedirectModal from '@/components/redirect-modal'
  import ErrorModal from '@/components/error-modal'
  import CoolPicker from '@/components/cool-picker'
  import RadioList from '@/components/radiolist'
  import FidoLoader from '@/components/fido-loader'
  import countryChoices from '@/utils/countries'
  import LocalesMixin from '@/mixins/localesmixin'
  import {checkSensitive} from '@/utils/regex'
  import _isEmpty from 'lodash.isempty'
  import _pick from 'lodash.pick'

  export default class Registration extends wepy.page {
    data = {
      title: '',
      subTitle: '',
      incomingTarget: '',
      idChoices: [],
      countryText: '',
      countryChoices: countryChoices,
      authData: null,
      wxUsername: null,
      personalNote: null,
      age: null,
      idNumber: '',
      idType: 'chinese_id',
      country: 'China',
      fullName: '',
      isRescuer: false,
      fullWidthButton: true,
      navBack: true
    }

    mixins = [LocalesMixin]

    components = {
      formparent: FormParent,
      redirectmodal: RedirectModal,
      errormodal: ErrorModal,
      coolpicker: CoolPicker,
      radiolist: RadioList,
      fidoloader: FidoLoader
    }

    computed = {
      wechatDisabled () {
        return this.authData !== null
      },
      chooseChineseId () {
        return this.idType === 'chinese_id'
      },
      hasEmptyFields () {
        const fields = _pick(this.data, ['age'], ['wxUsername'], ['personalNote'], ['idNumber'])

        if (this.idType === 'passport') {
          fields.country = this.country
          fields.fullName = this.fullName
        }
        const emptyFields = Object.keys(fields).filter(field => {
          let value = fields[field]
          if (value === '' || value === ' ' || value === null) {
            return field
          }
        })
        return _isEmpty(emptyFields) ? false : emptyFields
      }
    }

    watch = {
      incomingTarget () {
        if (this.isRescuer) {
          this.title = this.t.title_rescuer
          this.subTitle = this.t.subtitle_rescuer
        } else {
          this.title = this.t.title
          this.subTitle = this.t.subtitle
        }
        console.log(this.isRescuer)
        this.idChoices = [{name: this.t.chinese_shenfenzheng, value: 'chinese_id'}, {name: this.t.passport, value: 'passport'}]
        this.countryText = this.t.country
        this.$apply()
      }
    }

    methods = {
      handleWx ({detail}) {
        const isSensitive = checkSensitive(detail.value)
        if (isSensitive) {
          return this.handleSensitiveWord()
        }
        this.wxUsername = detail.value
        this.$apply()
      },
      handlePersonal ({detail}) {
        const isSensitive = checkSensitive(detail.value)
        if (isSensitive) {
          return this.handleSensitiveWord()
        }
        this.personalNote = detail.value
        this.$apply()
      },
      handleAge ({detail}) {
        const isSensitive = checkSensitive(detail.value)
        if (isSensitive) {
          return this.handleSensitiveWord()
        }
        this.age = detail.value
        this.$apply()
      },
      handleId ({detail}) {
        this.idNumber = detail.value
        this.$apply()
      },
      handleFullName ({detail}) {
        const isSensitive = checkSensitive(detail.value)
        if (isSensitive) {
          return this.handleSensitiveWord()
        }
        this.fullName = detail.value
        this.$apply()
      },
      handleCountryChange ({detail}) {
        this.country = countryChoices[detail.value]
        this.$apply()
      },
      reloadPage () {
        this.onLoad()
      }
    }

    async loginWithWechat () {
      try {
        this.$invoke('fidoloader', 'showLoading', '')
        await this.$parent.globalData.user.logIn()
        this.authData = this.$parent.globalData.user.attributes
        this.$invoke('fidoloader', 'hideLoading', '')
        this.$apply()
        if (this.authData.verified) {
          const params = {
            header: this.t.submit_error_header,
            message: this.t.already_registered
          }
          return this.$invoke('redirectmodal', 'toggleModal', params)
        }
      } catch (error) {
        this.$invoke('fidoloader', 'hideLoading', '')
        console.error(error)
        this.handleFetchError()
      }
    }
    handleFetchError () {
      const params = {
        header: this.t.error_header,
        message: this.t.error_message,
        refresh: true
      }
      this.$invoke('errormodal', 'showMessage', params)
    }

    async handleSubmit () {
      if (this.hasEmptyFields) return this.handleSubmitError()
      this.$invoke('fidoloader', 'showLoading', '')
      try {
        const {wxUsername,
          personalNote,
          age,
          idType,
          idNumber,
          fullName,
          country,
          isRescuer} = this.data
        const verified = true
        await this.$parent.globalData.user.updateProfileInfo({wxUsername, personalNote, age, idType, idNumber, fullName, country, isRescuer, verified})
        const params = {message: this.t.success_message}
        this.$invoke('fidoloader', 'hideLoading', '')
        this.handleRescuerSuccess()
        this.$invoke('redirectmodal', 'toggleModal', params)
      } catch (err) {
        console.error(err)
        this.handleFetchError()
      }
    }

    handleRescuerSuccess () {
      if (this.isRescuer) {
        wepy.setStorageSync('is_rescuer_view', true)
      }
    }

    handleSubmitError () {
      const params = {
        header: this.t.submit_error_header,
        message: this.t.submit_error_message
      }
      return this.$invoke('errormodal', 'showMessage', params)
    }

    handleSensitiveWord () {
      const params = {header: this.t.sensitive_word_header, message: this.t.sensitive_word}
      return this.$invoke('errormodal', 'showMessage', params)
    }

    onPullDownRefresh () {
      wepy.stopPullDownRefresh()
    }

    onLoad ({target}) {
      if (target === 'rescuer') {
        this.isRescuer = true
      }
      this.incomingTarget = target
      this.isRegistered = this.$parent.globalData.user.isRegistered
      this.$apply()
      if (this.isRegistered) {
        const params = {
          message: this.t.redirect_message,
          link: 'edit-profile',
          linkname: this.t.edit_profile
        }
        this.$invoke('redirectmodal', 'toggleModal', params)
      }
    }
  }
</script>
