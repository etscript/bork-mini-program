<style lang="scss" src="../styles/_forms.scss"></style>
<template>
  <view class="container padbox--default">
    <view class="form--title">{{title}}</view>
    <view class="form--subtitle">{{subtitle}}</view>
    <formparent>
      <view class="form--group">
        <view class="form--group__title">{{t.images}}</view>
        <view class="form-item--default__box">
          <imageuploader :images.sync="images" :animalId.sync="animalId"/>
        </view>
      </view>
      <view class="form--group">
        <view class="form--group__title">{{t.basic_info}}</view>
        <view class="form-item--default">
          <view class="form-item--label">
            <view class="form-item--label-inner">{{t.name}}</view>
          </view>
          <input type="text" class="form-item--input" @blur="handleName" maxlength="70" confirm-type="next" value="{{name}}"/>
        </view>
        <view class="form-item--default">
          <view class="form-item--label">
            <view class="form-item--label-inner">{{t.animal_intro_explanation}}</view>
          </view>
          <input type="text" class="form-item--input" @blur="handleIntro" confirm-type="next" maxlength="200" value="{{intro}}"/>
        </view>
        <view class="form-item--default">
          <view class="form-item--label">
            <view class="form-item--label-inner">{{t.type}}</view>
          </view>
          <radiolist :choices.sync="typeChoices" :currentchoice.sync="currentType"/>
        </view>
        <view class="form-item--default">
          <view class="form-item--label">
            <view class="form-item--label-inner">{{t.gender}}</view>
          </view>
            <radiolist2 :choices.sync="genderChoices" :currentchoice.sync="currentGender"/>
        </view>
        <view class="form-item--default">
          <view class="form-item--label">
            <view class="form-item--label-inner">{{t.fixed}}</view>
          </view>
          <view class="form-item--switch-outer">
            <switch @change="toggleFixed" class="form-item--switch" checked="{{animalFixed}}"/> {{fixedText}}
          </view>
        </view>
        <view class="form-item--default">
          <view class="form-item--label">
            <view class="form-item--label-inner">
              {{t.available_label}}
            </view>
          </view>
          <view class="form-item--switch-outer">
            <switch @change="toggleAvailable" class="form-item--switch" checked="{{animalAvailable}}"/> {{availableText}}
          </view>
        </view>
      </view>
      <button class="btn--default" @tap="handleSubmit">{{t.save}}</button>
    </formparent>
  </view>
  <errormodal/>
  <redirectmodal/>
  <fidoloader/>
</template>
<script>
  import wepy from 'wepy'
  import FormParent from '@/components/form-parent'
  import LocalesMixin from '@/mixins/localesmixin'
  import AnimalMixin from '@/mixins/animal-mixin'
  import FidoLoader from '@/components/fido-loader'
  import RedirectModal from '@/components/redirect-modal'
  import ImageUploader from '@/components/image-uploader'
  import RadioList from '@/components/radiolist'
  import ErrorModal from '@/components/error-modal'
  import _isEmpty from 'lodash.isempty'
  import _pick from 'lodash.pick'

  export default class EditAnimal extends wepy.page {
    config = {
      navigationBarTitleText: 'fido'
    }

    data = {
      animalId: '',
      typeChoices: [],
      genderChoices: [],
      currentType: '',
      currentGender: '',
      isEditing: false,
      title: '',
      subtitle: '',
      images: []

    }

    components = {
      formparent: FormParent,
      fidoloader: FidoLoader,
      redirectmodal: RedirectModal,
      errormodal: ErrorModal,
      imageuploader: ImageUploader,
      radiolist2: RadioList,
      radiolist: RadioList
    }

    watch = {
      t () {
        // set the data values when locales are ready
        if (this.isEditing) {
          this.title = this.t.edit_title
          this.subtitle = this.t.edit_subtitle
        } else {
          this.title = this.t.add_title
          this.subtitle = this.t.add_subtitle
        }
        this.typeChoices = [
          {name: this.t.dog, value: 'dog'},
          {name: this.t.cat, value: 'cat'},
          {name: this.t.other, value: 'other'}]
        this.genderChoices = [
          {name: this.t.male, value: 'male'},
          {name: this.t.female, value: 'female'}]
      },
      animalInfo (newVal, oldVal) {
        this.currentGender = newVal.gender
        this.currentType = newVal.type
        this.$apply()
      },
      currentType () {
        console.log('now here')
        this.animalInfo.type = this.currentType
      },
      currentGender () {
        this.animalInfo.gender = this.currentGender
      }
    }

    mixins = [LocalesMixin, AnimalMixin]

    computed = {
      name () {
        if (this.animalInfo && this.animalInfo.name) {
          return this.animalInfo.name
        }
        return ''
      },
      intro () {
        if (this.animalInfo && this.animalInfo.intro) {
          return this.animalInfo.intro
        }
        return ''
      },
      availableText () {
        if (_isEmpty(this.t)) return ''
        if (this.animalInfo.available) {
          return this.t.available
        } else {
          return this.t.not_available
        }
      },
      animalAvailable () {
        return this.animalInfo.available
      },
      hasEmptyFields () {
        const fields = _pick(this.animalInfo, ['name'], ['intro'], ['type'])
        const emptyFields = Object.keys(fields).filter(field => {
          let value = fields[field]
          if (value === '' || value === ' ' || value === null) {
            return field
          }
        })
        return _isEmpty(emptyFields) ? false : emptyFields
      },
      fixedText () {
        if (_isEmpty(this.t)) return ''
        if (this.animalInfo.fixed === true) {
          return this.t.fixed
        } else {
          return this.t.not_fixed
        }
      },
      animalFixed () {
        return this.animalInfo && this.animalInfo.fixed
      }
    }

    methods = {
      handleIntro ({detail}) {
        this.animalInfo.intro = detail.value
        this.$apply()
      },
      handleName ({detail}) {
        this.animalInfo.name = detail.value
        this.$apply()
      },
      toggleAvailable ({detail}) {
        this.animalInfo.available = detail.value
        this.$apply()
      },
      toggleFixed ({detail}) {
        this.animalInfo.fixed = detail.value
        console.log(this.animalInfo.fixed)
      }
    }

    onLoad ({id, edit}) {
      this.animalId = id
      this.isEditing = JSON.parse(edit)
      if (this.isEditing) {
        this.fetchAnimal(id)
      }
      this.$apply()
      this.$parent.globalData.user.requestPicture()
    }

    async handleSubmit () {
      if (this.hasEmptyFields) return this.handleSubmitError()
      const fields = _pick(this.animalInfo, ['name'], ['intro'], ['type'], ['available'], ['gender'], ['fixed'])
      const images = this.images
      const params = {images, ...fields}
      try {
        const updatedAnimal = await this.$parent.globalData.user.updateRescue(this.animalId, params)
        this.animalInfo = updatedAnimal
        this.$apply()
        const message = this.isEditing ? this.t.edit_success_message : this.t.success_message
        const redirectParams = {message}
        this.$invoke('redirectmodal', 'toggleModal', redirectParams)
      } catch (err) {
        this.handleSubmitError()
      }
    }

    handleSubmitError () {
      const params = {
        header: this.t.submit_error_header,
        message: this.t.submit_error_message
      }
      return this.$invoke('errormodal', 'showMessage', params)
    }
  }
</script>
