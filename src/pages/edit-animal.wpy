<style lang="scss" src="../styles/_forms.scss"></style>
<template>
  <view class="container padbox--default">
    <view class="form--title">{{title}}</view>
    <view class="form--subtitle">{{subtitle}}</view>
    <formparent>
      <view class="form--group">
        <view class="form--group__title">{{t.images}}</view>
        <view class="form-item--default__box">
          <imageuploader :images.sync="images" :animalId.sync="animalId"/>
        </view>
      </view>
      <view class="form--group">
        <view class="form--group__title">{{t.basic_info}}</view>
        <view class="form-item--default">
          <view class="form-item--label">
            <view class="form-item--label-inner">{{t.name}}</view>
          </view>
          <input type="text" 
                class="form-item--input" 
                @blur="handleName" 
                maxlength="70" 
                confirm-type="next" 
                value="{{name}}"/>
        </view>
        <view class="form-item--default">
          <view class="form-item--label">
            <view class="form-item--label-inner">{{t.intro}}</view>
          </view>
          <input type="text" class="form-item--input" @blur="handleIntro" confirm-type="next" maxlength="200" value="{{intro}}"/>
        </view>
        <view class="form-item--default">
          <view class="form-item--label">
            <view class="form-item--label-inner">{{t.age}}</view>
          </view>
          <view class="form-item--flex-item">
            <input type="number" class="form-item--input__half" @blur="handleAge" confirm-type="next" maxlength="10" value="{{animalAge}}"/>
            <picker mode="selector"
                  @change="handleAgeUnit"
                  value="{{currentAgeUnit}}"
                  range="{{ageUnits}}"
                  range-key="name"
                  class="form-item--picker__half">
              {{currentAgeUnitText}}
            </picker>
          </view>
        </view>
        <view class="form-item--default">
          <view class="form-item--label">
            <view class="form-item--label-inner">{{t.location}}</view>
          </view>
          <view class="form-item--input"
                wx:if="{{mapVisible}}">
            <locationselector :point.sync="animalPoint"
                              :stickyMap.sync="stickyMap"
                              :isPicker.sync="isPicker"
                              :neighborhood.sync="animalNeighborhood"/>
          </view>
        </view>
        <view class="form-item--radio">
          <view class="form-item--label">
            <view class="form-item--label-inner">{{t.type}}</view>
          </view>
          <radiolist :choices.sync="typeChoices" :currentchoice.sync="currentType"/>
        </view>
        <view class="form-item--radio">
          <view class="form-item--label">
            <view class="form-item--label-inner">{{t.gender}}</view>
          </view>
            <radiolist2 :choices.sync="genderChoices" :currentchoice.sync="currentGender"/>
        </view>
        <view class="form--checkbox-group">
          <coolcheckbox1 :checked.sync="animalAvailable">{{t.available}}</coolcheckbox1>
          <coolcheckbox2 :checked.sync="animalFixed">{{t.fixed}}</coolcheckbox2>
          <coolcheckbox3 :checked.sync="animalVaccinated">{{t.vaccines}}</coolcheckbox3>
          <coolcheckbox4 :checked.sync="microchipped">{{t.microchipped}}</coolcheckbox4>
          <coolcheckbox5 :checked.sync="dewormed">{{t.dewormed}}</coolcheckbox5>
          <coolcheckbox6 :checked.sync="deflead">{{t.deflead}}</coolcheckbox6>
        </view>
      </view>
      <button class="btn--default" @tap="handleSubmit">{{t.save}}</button>
      <button class="btn--danger" @tap="toggleDeleteModal" wx:if="{{isEditing}}">{{t.delete_animal}}</button>
    </formparent>
  </view>
  <errormodal/>
  <redirectmodal :navBack="navBack"/>
  <fidoloader/>
  <modal :isopen.sync="deleteConfirmOpen" @masktap.user="toggleDeleteModal">
    <view class="text-center">
      {{t.confirm_delete}}
    </view>
    <view class="cancel-btns">
      <button class="btn--blank" @tap="toggleDeleteModal">{{t.cancel}}</button>
      <button class="btn--default__small" @tap="handleDelete">{{t.confirm}}</button>
    </view>
  </modal>
</template>
<script>
  import wepy from 'wepy'
  import FormParent from '@/components/form-parent'
  import LocalesMixin from '@/mixins/localesmixin'
  import AnimalMixin from '@/mixins/animal-mixin'
  import FidoLoader from '@/components/fido-loader'
  import RedirectModal from '@/components/redirect-modal'
  import Modal from '@/components/modal'
  import ErrorModal from '@/components/error-modal'
  import ImageUploader from '@/components/image-uploader'
  import LocationSelector from '@/components/location-selector'
  import RadioList from '@/components/radiolist'
  import CoolCheckBox from '@/components/cool-checkbox'
  import _isEmpty from 'lodash.isempty'
  import _pick from 'lodash.pick'
  import _checkEmptyFields from '@/utils/checkemptyfields'
  import {_getUnit, _unitToDays, _unitAndDaysToNumber} from '@/utils/age-fns'
  import {checkSensitive} from '@/utils/regex'

  export default class EditAnimal extends wepy.page {
    config = {
      navigationBarTitleText: 'fido'
    }

    data = {
      animalId: '',
      typeChoices: [],
      genderChoices: [],
      currentType: 'dog',
      currentGender: 'male',
      preload: true,
      isEditing: false,
      animalAvailable: true,
      animalPoint: {},
      animalFixed: true,
      animalVaccinated: true,
      microchipped: true,
      deflead: true,
      dewormed: true,
      animalNeighborhood: '',
      title: '',
      subtitle: '',
      images: [],
      ageUnits: [],
      currentAgeUnit: 'years',
      mapVisible: true,
      navBack: true,
      deleteConfirmOpen: false,
      animalAge: '',
      stickyMap: false,
      isPicker: true
    }

    components = {
      formparent: FormParent,
      fidoloader: FidoLoader,
      redirectmodal: RedirectModal,
      errormodal: ErrorModal,
      imageuploader: ImageUploader,
      radiolist2: RadioList,
      radiolist: RadioList,
      coolcheckbox1: CoolCheckBox,
      coolcheckbox2: CoolCheckBox,
      coolcheckbox3: CoolCheckBox,
      coolcheckbox4: CoolCheckBox,
      coolcheckbox5: CoolCheckBox,
      coolcheckbox6: CoolCheckBox,
      locationselector: LocationSelector,
      modal: Modal
    }

    watch = {
      t () {
        // set the data values when locales are ready
        if (this.isEditing) {
          this.title = this.t.edit_title
          this.subtitle = this.t.edit_subtitle
        } else {
          this.title = this.t.add_title
          this.subtitle = this.t.add_subtitle
        }
        this.typeChoices = [
          {name: this.t.dog, value: 'dog'},
          {name: this.t.cat, value: 'cat'},
          {name: this.t.other, value: 'other'}]
        this.genderChoices = [
          {name: this.t.male, value: 'male'},
          {name: this.t.female, value: 'female'}]
        this.ageUnits = [
          {name: this.t.weeks, value: 'weeks'},
          {name: this.t.months, value: 'months'},
          {name: this.t.years, value: 'years'}]
      },
      animalInfo (newVal, oldVal) {
        /*
          THIS IS BAD...VERY BAD. THIS FUNCTION GETS CALLED LIKE FUCKING CONSTANTLY
          AND IS CONSTANTLY CALLING setData ON THIS ENTIRE HUGE OBJECT.
          FIX THIS JOHNNY.
          FIX THIS.
        */
        this.currentGender = newVal.gender
        this.currentType = newVal.type
        this.animalAvailable = this.animalInfo.available
        this.animalFixed = this.animalInfo.fixed
        this.animalVaccinated = this.animalInfo.vaccinated
        this.microchipped = this.animalInfo.microchipped
        this.dewormed = this.animalInfo.dewormed
        this.deflead = this.animalInfo.deflead
        this.animalNeighborhood = this.animalInfo.neighborhood ? this.animalInfo.neighborhood : ''
        this.animalPoint = this.animalInfo.location || {}
        if (this.animalInfo.age && this.preload) {
          this.currentAgeUnit = _getUnit(this.animalInfo.age)
        }
        if (this.animalInfo.age) {
          const age = Math.floor(_unitAndDaysToNumber(this.currentAgeUnit, this.animalInfo.age))
          this.animalAge = age
        }
        this.preload = false
        // this.$apply()
      },
      currentType () {
        this.animalInfo.type = this.currentType
      },
      currentGender () {
        this.animalInfo.gender = this.currentGender
      },
      animalAvailable () {
        this.animalInfo.available = this.animalAvailable
      },
      animalFixed () {
        this.animalInfo.fixed = this.animalFixed
      },
      animalVaccinated () {
        this.animalInfo.vaccinated = this.animalVaccinated
      },
      animalPoint () {
        this.animalInfo.location = this.animalPoint
        this.$apply()
      },
      animalNeighborhood () {
        if (this.animalNeighborhood && this.animalNeighborhood !== '') {
          this.animalInfo.neighborhood = this.animalNeighborhood
          this.$apply()
        }
      },
      deflead () {
        this.animalInfo.deflead = this.deflead
        this.$apply()
      },
      dewormed () {
        this.animalInfo.dewormed = this.dewormed
      },
      microchipped () {
        this.animalInfo.microchipped = this.microchipped
        this.$apply()
      }
    }

    mixins = [LocalesMixin, AnimalMixin]

    computed = {
      name () {
        if (this.animalInfo && this.animalInfo.name) {
          return this.animalInfo.name
        }
        return ''
      },
      intro () {
        if (this.animalInfo && this.animalInfo.intro) {
          return this.animalInfo.intro
        }
        return ''
      },
      currentAgeUnitText () {
        if (!_isEmpty(this.ageUnits)) {
          const unitObj = this.ageUnits.find(unit => unit.value === this.currentAgeUnit)
          return unitObj && unitObj.name
        }
        return ''
      },
      hasEmptyFields () {
        return _checkEmptyFields(this.serializeFields())
      }
    }

    methods = {
      handleIntro ({detail}) {
        const isSensitive = checkSensitive(detail.value)
        if (isSensitive) {
          this.animalInfo.intro = ''
          return this.handleSensitiveWord()
        }
        this.animalInfo.intro = detail.value
        this.$apply()
      },
      handleName ({detail}) {
        const isSensitive = checkSensitive(detail.value)
        if (isSensitive) {
          this.animalInfo.name = ''
          return this.handleSensitiveWord()
        }
        this.animalInfo.name = detail.value
        this.$apply()
      },
      handleAge ({detail}) {
        if (detail.value) {
          const age = _unitToDays(this.currentAgeUnit, detail.value)
          this.animalInfo.age = age
        } else {
          this.animalInfo.age = null
        }
        this.$apply()
      },
      handleAgeUnit ({detail}) {
        const index = detail.value
        const targetValue = this.ageUnits[index].value
        this.currentAgeUnit = targetValue
        this.animalInfo.age = _unitToDays(targetValue, this.animalAge)
        this.$apply()
      },
      toggleDeleteModal () {
        this.deleteConfirmOpen = !this.deleteConfirmOpen
        this.$apply()
      }
    }

    serializeFields () {
      const fields = _pick(this.animalInfo,
        ['name'],
        ['intro'],
        ['age'],
        ['type'],
        ['gender'],
        ['location'],
        ['available'],
        ['fixed'],
        ['vaccinated'],
        ['dewormed'],
        ['deflead'],
        ['neighborhood'],
        ['microchipped'])
      const params = {images: this.images, ...fields}
      return params
    }

    handleSensitiveWord () {
      const params = {header: this.t.sensitive_word_header, message: this.t.sensitive_word}
      return this.$invoke('errormodal', 'showMessage', params)
    }

    async handleSubmit () {
      this.mapVisible = false
      if (this.hasEmptyFields) return this.handleSubmitError()
      this.$invoke('fidoloader', 'showLoading', '')
      const params = this.serializeFields()
      try {
        const updatedAnimal = await this.$parent.globalData.user.updateRescue(this.animalId, params)
        this.animalInfo = updatedAnimal
        const message = this.isEditing ? this.t.edit_success_message : this.t.success_message
        const redirectParams = {message}
        this.$invoke('fidoloader', 'hideLoading', '')
        this.$invoke('redirectmodal', 'toggleModal', redirectParams)
        this.$apply()
      } catch (err) {
        this.handleSubmitError(err)
      }
    }

    async handleDelete () {
      this.$invoke('fidoloader', 'showLoading', '')
      this.deleteConfirmOpen = !this.deleteConfirmOpen
      try {
        await this.$parent.globalData.user.deleteRescue(this.animalInfo.objectId)
        this.$invoke('fidoloader', 'hideLoading', '')
        wepy.navigateBack()
      } catch (err) {
        this.$invoke('fidoloader', 'hideLoading', '')
        console.error(err)
      }
    }

    handleSubmitError () {
      console.log('here')
      let header = this.t.submit_error_fail_header
      let message = this.t.submit_error_fail
      if (this.hasEmptyFields && this.hasEmptyFields[0]) {
        const field = this.hasEmptyFields[0]
        message = `${this.t.submit_error_message}${this.t[field]}`
        header = this.t.submit_error_header
      }
      this.$invoke('fidoloader', 'hideLoading', '')
      const params = {
        header,
        message
      }
      this.mapVisible = true
      this.$apply()
      return this.$invoke('errormodal', 'showMessage', params)
    }

    onPullDownRefresh () {
      wepy.stopPullDownRefresh()
    }

    async onLoad ({id, edit}) {
      this.animalId = id
      this.isEditing = JSON.parse(edit)
      if (this.isEditing) {
        try {
          this.$invoke('fidoloader', 'showLoading', '')
          await this.fetchAnimal(id, [], true)
          this.$invoke('fidoloader', 'hideLoading', '')
        } catch (err) {
          console.error(err)
        }
      }
      this.$apply()
      this.$parent.globalData.user.requestPicture()
    }
  }
</script>
