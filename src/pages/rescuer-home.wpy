<template>
  <view class="container__no-overflow">
    <profileheader :userInfo.sync="userInfo"/>
    <tabswiper :tabs.sync="tabs" :activetab.sync="activetab">
      <tabswiperitem @scrollBottom.user="appendRequests">
        <view class="home--blank" wx:if="{{requestsEmpty && !requestsLoading}}">{{t.requests_empty}}</view>
        <repeat for="{{requests}}" index="index" item="item" key="index">
          <applicationlistitem :application.sync="item" :isowner.sync="isOwner"/>
        </repeat>
        <inlineloading1 :isopen.sync="requestsLoading"/>
      </tabswiperitem>
      <tabswiperitem2 @scrollBottom.user="appendRescues">
        <block wx:if="{{rescuesEmpty && !rescuesLoading}}">
          <view class="home--blank">{{t.rescues_empty}}</view>
          <view class="padbox--default">
            <button class="btn--default__dark" @tap="createRescue">{{t.create_a_rescue}}</button>
          </view>
        </block>
        <view class="padbox--half">
          <repeat for="{{animals}}" index="index" item="animal" key="index">
            <animallistitem :animalObj.sync="animal" :isOwner.sync="isOwner"/>
          </repeat>
        </view>
        <inlineloading2 :isopen.sync="rescuesLoading"/>
      </tabswiperitem2>
    </tabswiper>
  </view>
  <fidoloader/>
</template>
<script>
  import wepy from 'wepy'
  import LocalesMixin from '@/mixins/localesmixin'
  import ProfileHeader from '@/components/profile-header'
  import TabSwiper from '@/components/tab-swiper'
  import TabSwiperItem from '@/components/tab-swiper-item'
  import InlineLoading from '@/components/inline-loading'
  import AnimalListItem from '@/components/animal-list-item'
  import ApplicationListItem from '@/components/application-list-item'
  import FidoLoader from '@/components/fido-loader'

  export default class RescuerHome extends wepy.page {
    data = {
      activetab: '',
      loading: true,
      userInfo: {},
      tabs: [],
      animals: [],
      requests: [],
      currentRescuePage: 1,
      lastRescueFetched: 0,
      rescuesLoading: true,
      requestsLoading: true,
      rescuesEmpty: false,
      requestsEmpty: false,
      isOwner: true
    }

    components = {
      profileheader: ProfileHeader,
      tabswiper: TabSwiper,
      tabswiperitem: TabSwiperItem,
      tabswiperitem2: TabSwiperItem,
      animallistitem: AnimalListItem,
      inlineloading1: InlineLoading,
      inlineloading2: InlineLoading,
      applicationlistitem: ApplicationListItem,
      fidoloader: FidoLoader
    }

    mixins = [LocalesMixin]

    computed = {}

    watch = {
      t () {
        const requests = {name: 'requests', t: this.t.requests}
        const rescues = {name: 'rescues', t: this.t.rescues}
        this.tabs = [requests, rescues]
        this.$apply()
      },
      activetab (newVal, oldVal) {
        if (oldVal !== '') {
          if (newVal === 'requests') return this.fetchRequests()
          if (newVal === 'rescues') return this.fetchRescues()
        }
      }
    }
    methods = {
      appendRequests () {
        console.log('yoooo')
      },
      appendRescues () {
        if (this.currentRescuePage === this.$parent.globalData.user.lastRescuePage) return ''
        if (this.lastRescueFetched === this.currentRescuePage) {
          this.currentRescuePage++
          this.fetchRescues()
        }
      }
    }
    onLoad ({tab}) {
      this.userInfo = this.$parent.globalData.user.attributes
      this.activetab = tab
      this.$apply()
    }

    onShow () {
      if (this.activetab === 'requests') return this.fetchRequests()
      if (this.activetab === 'rescues') return this.fetchRescues()
    }

    onPullDownRefresh () {
      this.onShow()
      setTimeout(() => wepy.stopPullDownRefresh(), 500)
    }

    async fetchRequests () {
      this.requestsLoading = true
      try {
        const requests = await this.$parent.globalData.user.fetchRequests(true)
        this.requests = requests
        this.requestsEmpty = requests.length < 1
        this.requestsLoading = false
        this.$apply()
      } catch (err) {
        console.log(err)
      }
    }

    async createRescue () {
      this.$invoke('fidoloader', 'showLoading', '')
      const animal = await this.$parent.globalData.user.createRescue()
      wepy.navigateTo({url: `edit-animal?id=${animal.id}&edit=false`})
      this.$invoke('fidoloader', 'hideLoading', '')
    }

    async fetchRescues () {
      /*
        When calling this, make sure that currentRescuePage has been iterated up
        Will not run if currentRescuePage is the same as lastrescuefetched
        this.$parent.globalData.user.lastRescuePage <-- amount of rescue pages total
        this.currentRescuePage <--Page to fetch
        this.lastRescueFetched <--current page that is on the page
      */
      if (this.currentRescuePage !== this.lastRescueFetched) {
        this.rescuesLoading = true
        try {
          const animals = await this.$parent.globalData.user.fetchRescues(this.currentRescuePage, true)
          this.animals = animals
          this.lastRescueFetched = this.currentRescuePage
          this.rescuesEmpty = animals.length < 1
          this.rescuesLoading = false
          this.$apply()
        } catch (err) {
          console.log('ohhh dear')
        }
      }
    }
  }
</script>
