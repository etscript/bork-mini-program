<style lang="scss">
  .something{
    color: pink;
  }
</style>
<template>
  <view class="container__flex-layout">
    <profileheader :userInfo.sync="userInfo"/>
    <tabswiper :tabs.sync="tabs" :activetab.sync="activetab">
      <tabswiperitem>
        <inlineloading1 :isopen.sync="requestsLoading"/>
        <view class="home--blank" wx:if="{{requestsEmpty && !requestsLoading}}">{{t.requests_empty}}</view>
        <repeat for="{{requests}}" index="index" item="item" key="index">
          <applicationlistitem :application.sync="item" :isowner.sync="isOwner"/>
        </repeat>
      </tabswiperitem>
      <tabswiperitem2>
        <view class="home--blank" wx:if="{{rescuesEmpty && !rescuesLoading}}">{{t.rescues_empty}}</view>
        <inlineloading2 :isopen.sync="rescuesLoading"/>
        <repeat for="{{animals}}" index="index" item="animal" key="index">
          <animallistitem :animalObj.sync="animal"/>
        </repeat>
      </tabswiperitem2>
    </tabswiper>
  </view>
</template>
<script>
  import wepy from 'wepy'
  import LocalesMixin from '@/mixins/localesmixin'
  import ProfileHeader from '@/components/profile-header'
  import TabSwiper from '@/components/tab-swiper'
  import TabSwiperItem from '@/components/tab-swiper-item'
  import InlineLoading from '@/components/inline-loading'
  import AnimalListItem from '@/components/animal-list-item'
  import ApplicationListItem from '@/components/application-list-item'

  export default class RescuerHome extends wepy.page {
    data = {
      activetab: '',
      loading: true,
      userInfo: {},
      tabs: [],
      animals: [],
      requests: [],
      currentRescuePage: 1,
      lastRescueFetched: 0,
      rescuesLoading: false,
      requestsLoading: false,
      rescuesEmpty: false,
      requestsEmpty: false,
      isOwner: true
    }

    components = {
      profileheader: ProfileHeader,
      tabswiper: TabSwiper,
      tabswiperitem: TabSwiperItem,
      tabswiperitem2: TabSwiperItem,
      animallistitem: AnimalListItem,
      inlineloading1: InlineLoading,
      inlineloading2: InlineLoading,
      applicationlistitem: ApplicationListItem
    }

    mixins = [LocalesMixin]

    computed = {
      canFetchRescues () {
        const unFetchedPage = this.currentRescuePage !== this.lastRescueFetched
        return unFetchedPage
      }
    }

    watch = {
      t () {
        const requests = {name: 'requests', t: this.t.requests}
        const rescues = {name: 'rescues', t: this.t.rescues}
        this.tabs = [requests, rescues]
        this.$apply()
      },
      activetab (newVal, oldVal) {
        if (newVal === 'requests') return this.fetchRequests()
        if (newVal === 'rescues') return this.fetchRescues()
      }
    }

    onLoad ({tab}) {
      this.userInfo = this.$parent.globalData.user.attributes
      this.activetab = tab
      this.$apply()
    }

    onShow () {
      if (this.activetab === 'requests') {
        this.fetchRequests()
      }
    }

    onHide () {
      // this.animals = []
      // this.$apply()
    }

    async fetchRequests () {
      this.requestsLoading = true
      try {
        const requests = await this.$parent.globalData.user.fetchRequests(true)
        this.requests = requests
        this.requestsEmpty = requests.length < 1
        this.requestsLoading = false
        this.$apply()
      } catch (err) {
        console.log(err)
      }
    }

    async fetchRescues () {
      if (!this.canFetchRescues) return
      this.rescuesLoading = true
      this.$apply()
      try {
        const animals = await this.$parent.globalData.user.fetchRescues(this.currentRescuePage)
        animals.map(animal => this.animals.push(animal))
        this.lastRescueFetched = this.lastRescueFetched + 1
        this.rescuesEmpty = animals.length < 1
        this.rescuesLoading = false
        this.$apply()
      } catch (err) {
        console.log('ohhh dear')
      }
    }
  }
</script>
